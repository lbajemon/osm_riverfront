---
title: "Analyse OSM data"
author: "Liolia Bajemon"
format: html
editor: visual
---

### Set-up

```{r packages, warning = FALSE}
library(tidyverse)
library(sf)
library(FactoMineR)
library(rnaturalearth)
library(cowplot)
library(ggplot2)
library(patchwork)
library(ggpattern)
```

```{r read_datasets}
tab_key_value = read.csv("input_data/tab_key_value.csv", sep = ";", encoding = "UTF-8") %>%
  mutate(keyval = paste0(key, "-", value)) %>% 
  select(c("group", "keyval"))

combinations = read.csv("input_data/tab_combinations.csv", sep = ",") %>% 
  mutate(keyval = paste0(key, "-", value)) %>% 
  left_join(tab_key_value, by = "keyval") 

# If error "Loop 1 is not valid: Edge 2 is degenerate (duplicate vertex)" then use
# sf_use_s2(FALSE)
sf_use_s2(TRUE)
zones_wo_loop = st_read("input_data/all_riverfronts_4326.shp") %>% 
  filter(ville != "Brisbane" & ville != "Windsor-Détroit") %>% 
  mutate(area = st_area(geometry))

sf_use_s2(FALSE)
loop = st_read("input_data/all_riverfronts_4326.shp") %>% 
  filter(ville == "Brisbane" | ville == "Windsor-Détroit") %>% 
  mutate(area = st_area(geometry))
```

### Run functions

```{r def_function}
analyse_osm = function(fid){

  # get total area of the selected zone 
  zone_area = zones$area[zones$id == fid]

  print(fid)
  # read file with statistics on OSM elements
  myfile = read.csv(glue::glue("data/osm_stat/osm_stat_{fid}.csv")) %>% 
    mutate(keyval = paste0(key, "-", value)) %>% 
    left_join(combinations, by = "keyval") %>% 
    # group by type of elements
    group_by(group) %>% 
    # get total area/length/number of each type of element
    dplyr::mutate(nb_tot = sum(nb), 
           area_tot = sum(area, na.rm = TRUE),
           length_tot = sum(length, na.rm = TRUE)) %>% 
    select(c("group", "nb_tot", "area_tot", "length_tot")) %>% 
    unique() %>% 
    dplyr::mutate(area_rel = area_tot/zone_area*100) %>% 
    dplyr::mutate(length_rel = length_tot/zone_area) %>% 
    dplyr::mutate(n_rel = nb_tot/zone_area) %>% 
    ungroup() %>% 
    dplyr::mutate(n_perc = nb_tot/sum(nb_tot)*100)
  
  write.csv(myfile, glue::glue("data/osm_analyse/osm_analyse_{fid}.csv"))
  print("done")
}
```

```{r run_function}
sf_use_s2(TRUE)
zones = zones_wo_loop
zones %>% 
  mutate(zones = purrr::map(id, analyse_osm))

sf_use_s2(FALSE)
zones = loop
zones %>% 
  mutate(zones = purrr::map(id, analyse_osm))
```

#### Bind all results

```{r bind_results}
read_results = function(fid, ville) {
  read.csv(glue::glue("data/osm_analyse/osm_analyse_{fid}.csv")) %>%
    select(-"X") %>%                    
    mutate(id = fid,
           city = ville)
}

zones = st_read("input_data/all_riverfronts_4326.shp")
data = purrr::map2_dfr(zones$id, zones$ville, read_results)
```

### Correlations

#### Two variables correlations

```{r}
envir = data %>% 
  filter(group == "environnement")
cor.test(envir$nb_tot, envir$area_tot)
# 0.59
cor.test(envir$n_rel, envir$area_rel)
# 0.33

leisure = data %>% 
  filter(group == "loisirs")
cor.test(leisure$nb_tot, leisure$area_tot)
# 0.83
cor.test(leisure$n_rel, leisure$area_rel)
# 0.35
cor.test(leisure$n_rel, leisure$length_rel)
# -0.08

religion = data %>% 
  filter(group == "religion")
cor.test(religion$nb_tot, religion$area_tot)
# 0.07
cor.test(religion$n_rel, religion$area_rel)
# 0.18

amenity = data %>% 
  filter(group == "aménité")
cor.test(amenity$nb_tot, amenity$area_tot)
# 0.84
cor.test(amenity$n_rel, amenity$area_rel)
# 0.19
cor.test(amenity$n_rel, amenity$length_rel)
# 0.77

infras = data %>% 
  filter(group == "infrastructure")
cor.test(infras$nb_tot, infras$area_tot)
# 0.85
cor.test(infras$n_rel, infras$area_rel)
# - 0.03
cor.test(infras$n_rel, infras$length_rel)
# 0.88

industry = data %>% 
  filter(group == "industrie")
cor.test(industry$nb_tot, industry$area_tot)
# 0.99
cor.test(industry$n_rel, industry$area_rel)
# 0.74

bati = data %>% 
  filter(group == "bâti")
cor.test(bati$nb_tot, bati$area_tot)
# 0.92
cor.test(bati$n_rel, bati$area_rel)
# 0.56

agri = data %>% 
  filter(group == "agriculture")
cor.test(agri$nb_tot, agri$area_tot)
# 0.11
cor.test(agri$n_rel, agri$area_rel)
# 0.75
```

#### ACP

```{r}
### prepare dataset 
continents = st_read("input_data/all_riverfronts_4326.shp") %>% 
  st_drop_geometry() %>% 
  select(c("ville", "continent"))

# reshape from long to wide format
data_acp = data %>% 
  select(c("group", "n_rel", "area_rel", "length_rel", "city")) %>% 
  pivot_wider(id_cols = city,
              names_from = group,
              values_from = c(n_rel, area_rel, length_rel)) %>% 
   mutate(across(everything(), ~replace_na(.x, 0))) %>% 
  # remove lengths columns which equal 0
  # as well as lengths for infrastructure and amenity bc it is highly correlated with n
  # only keep length for leisure
  select(-c("length_rel_religion", "length_rel_infrastructure", "length_rel_environnement", "length_rel_aménité", "length_rel_bâti", "length_rel_industrie", "length_rel_agriculture")) %>% 
  # remove n for which it is highly correlated with area
  select(-c("n_rel_industrie", "n_rel_bâti", "n_rel_agriculture")) %>% 
  left_join(continents, by = join_by("city" == "ville")) %>% 
  column_to_rownames(var = "city") %>% 
  mutate(continent = as.factor(continent)) 
```

```{r}
res = PCA(data_acp, quali.sup = which(names(data_acp) == "continent"), graph = TRUE)

# dynamic exploration of the results
explor::explor(res)

cat_var = factor(c("Infrastructure", "Religion", "Loisirs", "Environnement",
                   "Aménité", "Infrastructure", "Religion", "Loisirs", 
                   "Environnement", "Aménité", "Bâti", "Agriculture", 
                   "Industrie", "Loisirs"))

palette_cat = c("Agriculture" = "#ffd92f", "Aménité" = "#fdb462", "Bâti" = "#eac1f7", "Environnement" = "#b3de69", "Industrie" = "#bf812d", "Infrastructure" = "#8dd3c7", "Loisirs" = "#f781bf", "Religion" = "#fb8072")

shape_continent = c(15, 16, 17, 3, 18, 4)

# static plot
fviz_pca_biplot(res, 
                geom.var = "arrow", # categories (variables) 
                arrowsize = 1, # size of the arrow, to make it wider
                labelsize = 2, # size of the labels of the cities (individuals)
                repel = TRUE, # avoid overlapping of labels
                geom.ind = c("point"),
                col.ind = "black",
                pointsize = 3, # size of points
                habillage = data_acp$continent,
                col.var = cat_var,
                mean.point = FALSE,
                legend.title = list(fill = "Continent", color = "Catégorie")) +
  scale_color_manual(values = palette_cat, aesthetics = "color") +
  scale_shape_manual(values = shape_continent) +
  guides(shape = "none") +
  labs(caption = "Réalisation : L. Bajemon, octobre 2025",
       title = "",
       fill = "continent") +
  theme_bw() +
  theme(legend.position = "right",
        plot.caption = element_text(color = "#d9d9d9", hjust = 1.5))

ggsave("results/acp_osm_riverfronts.svg")

# legend of forms (continents)
legend_data = data.frame(continent = factor(levels_continent, levels = levels_continent))

ggplot(legend_data,
       aes(x = 1, y = continent, shape = continent)) +
  geom_point(size = 3, 
             color = "black") +
  scale_shape_manual(values = shape_continent) +
  theme_void() +
  labs(shape = "Continent")

ggsave("results/acp_legend_shape.svg")
```

### Barplots

##### For each city

```{r make_barplot}
make_barplot = function(fid, city){
  
  print(city)
  
  # read file 
  file = read.csv(glue::glue("data/osm_analyse/osm_analyse_{fid}.csv")) %>% 
    mutate(area_perc = area_tot/sum(area_tot)*100) %>% 
    mutate(length_perc = length_tot/sum(length_tot)*100) %>% 
    pivot_longer(cols = c("n_perc", "area_perc", "length_perc"),
                 names_to = "perc",
                 values_to = "valeur") %>% 
    select(c("group", "perc", "valeur"))
  
  file %>% 
    filter(valeur != 0) %>% 
    ggplot(aes(x = valeur,
               y = perc,
               fill = group)) +
     geom_bar(stat = "identity") +
    scale_fill_manual(values = c("agriculture" = "#ffd92f", "aménité" = "#fdb462", "bâti" = "#eac1f7", "environnement" = "#b3de69", "industrie" = "#bf812d", "infrastructure" = "#8dd3c7", "loisirs" = "#f781bf", "religion" = "#fb8072")) +
    labs(title = paste("Le front d'eau sur OSM à", city),
         y = "",
         x = "%",
         fill = "Catégorie",
         caption = "Réalisation : L. Bajemon, octobre 2025") +
    scale_y_discrete(labels = c("n_perc" = "Points", "area_perc" = "Polygones", "length_perc" = "Lignes")) +
    coord_flip() +
    theme_bw() +
    theme(legend.position = "bottom",
          plot.caption = element_text(color = "#d9d9d9", hjust = 1))
  
  ggsave(glue::glue("results/barplots/barplot_osm_{fid}.svg"), width = 2000, height = 1300, units = "px")
  
  print("barplot saved")
}
```

```{r run_barplot}
zones %>% 
  mutate(data = map2(.x = id,
                     .y = ville,
                     .f = make_barplot))
```

##### Combine barplots

```{r}
make_big_barplot = function(fid, city){

 file = read.csv(glue::glue("data/osm_analyse/osm_analyse_{fid}.csv")) %>% 
    mutate(area_perc = area_tot/sum(area_tot)*100) %>% 
    mutate(length_perc = length_tot/sum(length_tot)*100) %>% 
    pivot_longer(cols = c("n_perc", "area_perc", "length_perc"),
                 names_to = "perc",
                 values_to = "valeur") %>% 
    select(c("group", "perc", "valeur"))
  
myplot = file %>% 
  filter(valeur != 0) %>% 
  ggplot(aes(x = valeur,
             y = perc,
             fill = group,
             pattern = perc)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("agriculture" = "#ffd92f", 
                               "aménité" = "#fdb462", 
                               "bâti" = "#eac1f7", 
                               "environnement" = "#b3de69", 
                               "industrie" = "#bf812d", 
                               "infrastructure" = "#8dd3c7", 
                               "loisirs" = "#f781bf", 
                               "religion" = "#fb8072")) +
  labs(title = city,
       y = "",
       x = "",
       fill = "Catégorie") +
  scale_y_discrete(labels = c("n_perc" = "Points", 
                              "area_perc" = "Polygones", 
                              "length_perc" = "Lignes")) +
  coord_flip() +
  theme_bw() +
  theme(legend.position = "none",
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        plot.title = element_text(size = 8),
        axis.text.x = element_text(size = 6))
}
```

```{r}
# arranged by continent
zones = zones %>% 
  mutate(continent = factor(continent,
                            levels = c("Afrique", "Amérique du Nord", "Amérique du Sud", "Asie", "Europe", "Océanie"))) %>% 
  arrange(continent, ville)

plot_list = map2(zones$id, zones$ville, make_big_barplot)
wrap_plots(plot_list, nrow = 6, ncol = 5)

# arranged by country
zones = zones %>% 
  mutate(pays = factor(pays,
                       levels = c("Maroc", "Canada", "Etats-Unis", "Argentine", "Brésil", "Chine", "Inde", "Malaisie", "Thaïlande", "Vietnam", "Russie", "France", "Slovaquie", "Australie"))) %>% 
  arrange(pays, ville)

plot_list = map2(zones$id, zones$ville, make_big_barplot)
wrap_plots(plot_list, nrow = 6, ncol = 5)
ggsave("results/barplots_par_pays.svg", width = 2500, height = 2500, units = "px")

## legend
legend_data = data.frame(categorie = factor(c("Agriculture", "Aménité", "Bâti",
                                              "Environnement", "Industrie",
                                              "Infrastructure", "Loisirs",
                                              "Religion")),
                         levels = c("Agriculture", "Aménité", "Bâti", 
                                    "Environnement", "Industrie", 
                                    "Infrastructure", "Loisirs", "Religion"))
col_categories = c("Agriculture" = "#ffd92f",
                   "Aménité" = "#fdb462",
                   "Bâti" = "#eac1f7",
                   "Environnement" = "#b3de69",
                   "Industrie" = "#bf812d",
                   "Infrastructure" = "#8dd3c7",
                   "Loisirs" = "#f781bf",
                   "Religion" = "#fb8072")

ggplot(legend_data,
       aes(x = 1, y = categorie, fill = categorie)) +
  geom_col() +
  scale_fill_manual(values = col_categories, name = "Catégorie") +
  theme_void() +
  theme(legend.position = "bottom")
ggsave("results/legend_categories.svg", width = 2500, height = 2500, units = "px")
```
